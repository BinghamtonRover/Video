// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to the C++ sick_scan_xd library.
///
/// For more details, see: https://github.com/SICKAG/sick_scan_xd
class LidarBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LidarBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LidarBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int SickScanApiLoadLibrary(
    ffi.Pointer<ffi.Char> library_filepath,
  ) {
    return _SickScanApiLoadLibrary(
      library_filepath,
    );
  }

  late final _SickScanApiLoadLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'SickScanApiLoadLibrary');
  late final _SickScanApiLoadLibrary = _SickScanApiLoadLibraryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  int SickScanApiUnloadLibrary() {
    return _SickScanApiUnloadLibrary();
  }

  late final _SickScanApiUnloadLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'SickScanApiUnloadLibrary');
  late final _SickScanApiUnloadLibrary =
      _SickScanApiUnloadLibraryPtr.asFunction<int Function()>();

  SickScanApiHandle SickScanApiCreate(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _SickScanApiCreate(
      argc,
      argv,
    );
  }

  late final _SickScanApiCreatePtr = _lookup<
      ffi.NativeFunction<
          SickScanApiHandle Function(ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('SickScanApiCreate');
  late final _SickScanApiCreate = _SickScanApiCreatePtr.asFunction<
      SickScanApiHandle Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int SickScanApiRelease(
    SickScanApiHandle apiHandle,
  ) {
    return _SickScanApiRelease(
      apiHandle,
    );
  }

  late final _SickScanApiReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SickScanApiHandle)>>(
          'SickScanApiRelease');
  late final _SickScanApiRelease =
      _SickScanApiReleasePtr.asFunction<int Function(SickScanApiHandle)>();

  int SickScanApiInitByLaunchfile(
    SickScanApiHandle apiHandle,
    ffi.Pointer<ffi.Char> launchfile_args,
  ) {
    return _SickScanApiInitByLaunchfile(
      apiHandle,
      launchfile_args,
    );
  }

  late final _SickScanApiInitByLaunchfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              ffi.Pointer<ffi.Char>)>>('SickScanApiInitByLaunchfile');
  late final _SickScanApiInitByLaunchfile = _SickScanApiInitByLaunchfilePtr
      .asFunction<int Function(SickScanApiHandle, ffi.Pointer<ffi.Char>)>();

  int SickScanApiInitByCli(
    SickScanApiHandle apiHandle,
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _SickScanApiInitByCli(
      apiHandle,
      argc,
      argv,
    );
  }

  late final _SickScanApiInitByCliPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('SickScanApiInitByCli');
  late final _SickScanApiInitByCli = _SickScanApiInitByCliPtr.asFunction<
      int Function(
          SickScanApiHandle, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int SickScanApiClose(
    SickScanApiHandle apiHandle,
  ) {
    return _SickScanApiClose(
      apiHandle,
    );
  }

  late final _SickScanApiClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SickScanApiHandle)>>(
          'SickScanApiClose');
  late final _SickScanApiClose =
      _SickScanApiClosePtr.asFunction<int Function(SickScanApiHandle)>();

  int SickScanApiRegisterCartesianPointCloudMsg(
    SickScanApiHandle apiHandle,
    SickScanPointCloudMsgCallback callback,
  ) {
    return _SickScanApiRegisterCartesianPointCloudMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterCartesianPointCloudMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanPointCloudMsgCallback)>>(
      'SickScanApiRegisterCartesianPointCloudMsg');
  late final _SickScanApiRegisterCartesianPointCloudMsg =
      _SickScanApiRegisterCartesianPointCloudMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanPointCloudMsgCallback)>();

  int SickScanApiDeregisterCartesianPointCloudMsg(
    SickScanApiHandle apiHandle,
    SickScanPointCloudMsgCallback callback,
  ) {
    return _SickScanApiDeregisterCartesianPointCloudMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterCartesianPointCloudMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanPointCloudMsgCallback)>>(
      'SickScanApiDeregisterCartesianPointCloudMsg');
  late final _SickScanApiDeregisterCartesianPointCloudMsg =
      _SickScanApiDeregisterCartesianPointCloudMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanPointCloudMsgCallback)>();

  int SickScanApiRegisterPolarPointCloudMsg(
    SickScanApiHandle apiHandle,
    SickScanPointCloudMsgCallback callback,
  ) {
    return _SickScanApiRegisterPolarPointCloudMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterPolarPointCloudMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanPointCloudMsgCallback)>>(
      'SickScanApiRegisterPolarPointCloudMsg');
  late final _SickScanApiRegisterPolarPointCloudMsg =
      _SickScanApiRegisterPolarPointCloudMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanPointCloudMsgCallback)>();

  int SickScanApiDeregisterPolarPointCloudMsg(
    SickScanApiHandle apiHandle,
    SickScanPointCloudMsgCallback callback,
  ) {
    return _SickScanApiDeregisterPolarPointCloudMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterPolarPointCloudMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanPointCloudMsgCallback)>>(
      'SickScanApiDeregisterPolarPointCloudMsg');
  late final _SickScanApiDeregisterPolarPointCloudMsg =
      _SickScanApiDeregisterPolarPointCloudMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanPointCloudMsgCallback)>();

  int SickScanApiRegisterImuMsg(
    SickScanApiHandle apiHandle,
    SickScanImuMsgCallback callback,
  ) {
    return _SickScanApiRegisterImuMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterImuMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanImuMsgCallback)>>('SickScanApiRegisterImuMsg');
  late final _SickScanApiRegisterImuMsg = _SickScanApiRegisterImuMsgPtr
      .asFunction<int Function(SickScanApiHandle, SickScanImuMsgCallback)>();

  int SickScanApiDeregisterImuMsg(
    SickScanApiHandle apiHandle,
    SickScanImuMsgCallback callback,
  ) {
    return _SickScanApiDeregisterImuMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterImuMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanImuMsgCallback)>>('SickScanApiDeregisterImuMsg');
  late final _SickScanApiDeregisterImuMsg = _SickScanApiDeregisterImuMsgPtr
      .asFunction<int Function(SickScanApiHandle, SickScanImuMsgCallback)>();

  int SickScanApiRegisterLFErecMsg(
    SickScanApiHandle apiHandle,
    SickScanLFErecMsgCallback callback,
  ) {
    return _SickScanApiRegisterLFErecMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterLFErecMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanLFErecMsgCallback)>>('SickScanApiRegisterLFErecMsg');
  late final _SickScanApiRegisterLFErecMsg = _SickScanApiRegisterLFErecMsgPtr
      .asFunction<int Function(SickScanApiHandle, SickScanLFErecMsgCallback)>();

  int SickScanApiDeregisterLFErecMsg(
    SickScanApiHandle apiHandle,
    SickScanLFErecMsgCallback callback,
  ) {
    return _SickScanApiDeregisterLFErecMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterLFErecMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanLFErecMsgCallback)>>('SickScanApiDeregisterLFErecMsg');
  late final _SickScanApiDeregisterLFErecMsg =
      _SickScanApiDeregisterLFErecMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanLFErecMsgCallback)>();

  int SickScanApiRegisterLIDoutputstateMsg(
    SickScanApiHandle apiHandle,
    SickScanLIDoutputstateMsgCallback callback,
  ) {
    return _SickScanApiRegisterLIDoutputstateMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterLIDoutputstateMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanLIDoutputstateMsgCallback)>>(
      'SickScanApiRegisterLIDoutputstateMsg');
  late final _SickScanApiRegisterLIDoutputstateMsg =
      _SickScanApiRegisterLIDoutputstateMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanLIDoutputstateMsgCallback)>();

  int SickScanApiDeregisterLIDoutputstateMsg(
    SickScanApiHandle apiHandle,
    SickScanLIDoutputstateMsgCallback callback,
  ) {
    return _SickScanApiDeregisterLIDoutputstateMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterLIDoutputstateMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanLIDoutputstateMsgCallback)>>(
      'SickScanApiDeregisterLIDoutputstateMsg');
  late final _SickScanApiDeregisterLIDoutputstateMsg =
      _SickScanApiDeregisterLIDoutputstateMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanLIDoutputstateMsgCallback)>();

  int SickScanApiRegisterRadarScanMsg(
    SickScanApiHandle apiHandle,
    SickScanRadarScanCallback callback,
  ) {
    return _SickScanApiRegisterRadarScanMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterRadarScanMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanRadarScanCallback)>>('SickScanApiRegisterRadarScanMsg');
  late final _SickScanApiRegisterRadarScanMsg =
      _SickScanApiRegisterRadarScanMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanRadarScanCallback)>();

  int SickScanApiDeregisterRadarScanMsg(
    SickScanApiHandle apiHandle,
    SickScanRadarScanCallback callback,
  ) {
    return _SickScanApiDeregisterRadarScanMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterRadarScanMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanRadarScanCallback)>>('SickScanApiDeregisterRadarScanMsg');
  late final _SickScanApiDeregisterRadarScanMsg =
      _SickScanApiDeregisterRadarScanMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanRadarScanCallback)>();

  int SickScanApiRegisterLdmrsObjectArrayMsg(
    SickScanApiHandle apiHandle,
    SickScanLdmrsObjectArrayCallback callback,
  ) {
    return _SickScanApiRegisterLdmrsObjectArrayMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterLdmrsObjectArrayMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanLdmrsObjectArrayCallback)>>(
      'SickScanApiRegisterLdmrsObjectArrayMsg');
  late final _SickScanApiRegisterLdmrsObjectArrayMsg =
      _SickScanApiRegisterLdmrsObjectArrayMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanLdmrsObjectArrayCallback)>();

  int SickScanApiDeregisterLdmrsObjectArrayMsg(
    SickScanApiHandle apiHandle,
    SickScanLdmrsObjectArrayCallback callback,
  ) {
    return _SickScanApiDeregisterLdmrsObjectArrayMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterLdmrsObjectArrayMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanLdmrsObjectArrayCallback)>>(
      'SickScanApiDeregisterLdmrsObjectArrayMsg');
  late final _SickScanApiDeregisterLdmrsObjectArrayMsg =
      _SickScanApiDeregisterLdmrsObjectArrayMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanLdmrsObjectArrayCallback)>();

  int SickScanApiRegisterVisualizationMarkerMsg(
    SickScanApiHandle apiHandle,
    SickScanVisualizationMarkerCallback callback,
  ) {
    return _SickScanApiRegisterVisualizationMarkerMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterVisualizationMarkerMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanVisualizationMarkerCallback)>>(
      'SickScanApiRegisterVisualizationMarkerMsg');
  late final _SickScanApiRegisterVisualizationMarkerMsg =
      _SickScanApiRegisterVisualizationMarkerMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, SickScanVisualizationMarkerCallback)>();

  int SickScanApiDeregisterVisualizationMarkerMsg(
    SickScanApiHandle apiHandle,
    SickScanVisualizationMarkerCallback callback,
  ) {
    return _SickScanApiDeregisterVisualizationMarkerMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterVisualizationMarkerMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanVisualizationMarkerCallback)>>(
      'SickScanApiDeregisterVisualizationMarkerMsg');
  late final _SickScanApiDeregisterVisualizationMarkerMsg =
      _SickScanApiDeregisterVisualizationMarkerMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, SickScanVisualizationMarkerCallback)>();

  int SickScanApiRegisterNavPoseLandmarkMsg(
    SickScanApiHandle apiHandle,
    SickScanNavPoseLandmarkCallback callback,
  ) {
    return _SickScanApiRegisterNavPoseLandmarkMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterNavPoseLandmarkMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanNavPoseLandmarkCallback)>>(
      'SickScanApiRegisterNavPoseLandmarkMsg');
  late final _SickScanApiRegisterNavPoseLandmarkMsg =
      _SickScanApiRegisterNavPoseLandmarkMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanNavPoseLandmarkCallback)>();

  int SickScanApiDeregisterNavPoseLandmarkMsg(
    SickScanApiHandle apiHandle,
    SickScanNavPoseLandmarkCallback callback,
  ) {
    return _SickScanApiDeregisterNavPoseLandmarkMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterNavPoseLandmarkMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanNavPoseLandmarkCallback)>>(
      'SickScanApiDeregisterNavPoseLandmarkMsg');
  late final _SickScanApiDeregisterNavPoseLandmarkMsg =
      _SickScanApiDeregisterNavPoseLandmarkMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanNavPoseLandmarkCallback)>();

  int SickScanApiRegisterDiagnosticMsg(
    SickScanApiHandle apiHandle,
    SickScanDiagnosticMsgCallback callback,
  ) {
    return _SickScanApiRegisterDiagnosticMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterDiagnosticMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanDiagnosticMsgCallback)>>(
      'SickScanApiRegisterDiagnosticMsg');
  late final _SickScanApiRegisterDiagnosticMsg =
      _SickScanApiRegisterDiagnosticMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanDiagnosticMsgCallback)>();

  int SickScanApiDeregisterDiagnosticMsg(
    SickScanApiHandle apiHandle,
    SickScanDiagnosticMsgCallback callback,
  ) {
    return _SickScanApiDeregisterDiagnosticMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterDiagnosticMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, SickScanDiagnosticMsgCallback)>>(
      'SickScanApiDeregisterDiagnosticMsg');
  late final _SickScanApiDeregisterDiagnosticMsg =
      _SickScanApiDeregisterDiagnosticMsgPtr.asFunction<
          int Function(SickScanApiHandle, SickScanDiagnosticMsgCallback)>();

  int SickScanApiRegisterLogMsg(
    SickScanApiHandle apiHandle,
    SickScanLogMsgCallback callback,
  ) {
    return _SickScanApiRegisterLogMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiRegisterLogMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanLogMsgCallback)>>('SickScanApiRegisterLogMsg');
  late final _SickScanApiRegisterLogMsg = _SickScanApiRegisterLogMsgPtr
      .asFunction<int Function(SickScanApiHandle, SickScanLogMsgCallback)>();

  int SickScanApiDeregisterLogMsg(
    SickScanApiHandle apiHandle,
    SickScanLogMsgCallback callback,
  ) {
    return _SickScanApiDeregisterLogMsg(
      apiHandle,
      callback,
    );
  }

  late final _SickScanApiDeregisterLogMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              SickScanLogMsgCallback)>>('SickScanApiDeregisterLogMsg');
  late final _SickScanApiDeregisterLogMsg = _SickScanApiDeregisterLogMsgPtr
      .asFunction<int Function(SickScanApiHandle, SickScanLogMsgCallback)>();

  int SickScanApiGetStatus(
    SickScanApiHandle apiHandle,
    ffi.Pointer<ffi.Int32> status_code,
    ffi.Pointer<ffi.Char> message_buffer,
    int message_buffer_size,
  ) {
    return _SickScanApiGetStatus(
      apiHandle,
      status_code,
      message_buffer,
      message_buffer_size,
    );
  }

  late final _SickScanApiGetStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('SickScanApiGetStatus');
  late final _SickScanApiGetStatus = _SickScanApiGetStatusPtr.asFunction<
      int Function(SickScanApiHandle, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Char>, int)>();

  int SickScanApiSendSOPAS(
    SickScanApiHandle apiHandle,
    ffi.Pointer<ffi.Char> sopas_command,
    ffi.Pointer<ffi.Char> sopas_response_buffer,
    int response_buffer_size,
  ) {
    return _SickScanApiSendSOPAS(
      apiHandle,
      sopas_command,
      sopas_response_buffer,
      response_buffer_size,
    );
  }

  late final _SickScanApiSendSOPASPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('SickScanApiSendSOPAS');
  late final _SickScanApiSendSOPAS = _SickScanApiSendSOPASPtr.asFunction<
      int Function(SickScanApiHandle, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int SickScanApiSetVerboseLevel(
    SickScanApiHandle apiHandle,
    int verbose_level,
  ) {
    return _SickScanApiSetVerboseLevel(
      apiHandle,
      verbose_level,
    );
  }

  late final _SickScanApiSetVerboseLevelPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(SickScanApiHandle, ffi.Int32)>>(
      'SickScanApiSetVerboseLevel');
  late final _SickScanApiSetVerboseLevel = _SickScanApiSetVerboseLevelPtr
      .asFunction<int Function(SickScanApiHandle, int)>();

  int SickScanApiGetVerboseLevel(
    SickScanApiHandle apiHandle,
  ) {
    return _SickScanApiGetVerboseLevel(
      apiHandle,
    );
  }

  late final _SickScanApiGetVerboseLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(SickScanApiHandle)>>(
          'SickScanApiGetVerboseLevel');
  late final _SickScanApiGetVerboseLevel = _SickScanApiGetVerboseLevelPtr
      .asFunction<int Function(SickScanApiHandle)>();

  int SickScanApiWaitNextCartesianPointCloudMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanPointCloudMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextCartesianPointCloudMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextCartesianPointCloudMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              SickScanApiHandle,
              ffi.Pointer<SickScanPointCloudMsg>,
              ffi.Double)>>('SickScanApiWaitNextCartesianPointCloudMsg');
  late final _SickScanApiWaitNextCartesianPointCloudMsg =
      _SickScanApiWaitNextCartesianPointCloudMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanPointCloudMsg>, double)>();

  int SickScanApiWaitNextPolarPointCloudMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanPointCloudMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextPolarPointCloudMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextPolarPointCloudMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              SickScanApiHandle,
              ffi.Pointer<SickScanPointCloudMsg>,
              ffi.Double)>>('SickScanApiWaitNextPolarPointCloudMsg');
  late final _SickScanApiWaitNextPolarPointCloudMsg =
      _SickScanApiWaitNextPolarPointCloudMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanPointCloudMsg>, double)>(isLeaf: true);

  int SickScanApiFreePointCloudMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanPointCloudMsg> msg,
  ) {
    return _SickScanApiFreePointCloudMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreePointCloudMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, ffi.Pointer<SickScanPointCloudMsg>)>>(
      'SickScanApiFreePointCloudMsg');
  late final _SickScanApiFreePointCloudMsg =
      _SickScanApiFreePointCloudMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanPointCloudMsg>)>();

  int SickScanApiWaitNextImuMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanImuMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextImuMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextImuMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle, ffi.Pointer<SickScanImuMsg>,
              ffi.Double)>>('SickScanApiWaitNextImuMsg');
  late final _SickScanApiWaitNextImuMsg =
      _SickScanApiWaitNextImuMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanImuMsg>, double)>();

  int SickScanApiFreeImuMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanImuMsg> msg,
  ) {
    return _SickScanApiFreeImuMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeImuMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              ffi.Pointer<SickScanImuMsg>)>>('SickScanApiFreeImuMsg');
  late final _SickScanApiFreeImuMsg = _SickScanApiFreeImuMsgPtr.asFunction<
      int Function(SickScanApiHandle, ffi.Pointer<SickScanImuMsg>)>();

  int SickScanApiWaitNextLFErecMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanLFErecMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextLFErecMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextLFErecMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle, ffi.Pointer<SickScanLFErecMsg>,
              ffi.Double)>>('SickScanApiWaitNextLFErecMsg');
  late final _SickScanApiWaitNextLFErecMsg =
      _SickScanApiWaitNextLFErecMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanLFErecMsg>, double)>();

  int SickScanApiFreeLFErecMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanLFErecMsg> msg,
  ) {
    return _SickScanApiFreeLFErecMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeLFErecMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              ffi.Pointer<SickScanLFErecMsg>)>>('SickScanApiFreeLFErecMsg');
  late final _SickScanApiFreeLFErecMsg =
      _SickScanApiFreeLFErecMsgPtr.asFunction<
          int Function(SickScanApiHandle, ffi.Pointer<SickScanLFErecMsg>)>();

  int SickScanApiWaitNextLIDoutputstateMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanLIDoutputstateMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextLIDoutputstateMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextLIDoutputstateMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              SickScanApiHandle,
              ffi.Pointer<SickScanLIDoutputstateMsg>,
              ffi.Double)>>('SickScanApiWaitNextLIDoutputstateMsg');
  late final _SickScanApiWaitNextLIDoutputstateMsg =
      _SickScanApiWaitNextLIDoutputstateMsgPtr.asFunction<
          int Function(SickScanApiHandle,
              ffi.Pointer<SickScanLIDoutputstateMsg>, double)>();

  int SickScanApiFreeLIDoutputstateMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanLIDoutputstateMsg> msg,
  ) {
    return _SickScanApiFreeLIDoutputstateMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeLIDoutputstateMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, ffi.Pointer<SickScanLIDoutputstateMsg>)>>(
      'SickScanApiFreeLIDoutputstateMsg');
  late final _SickScanApiFreeLIDoutputstateMsg =
      _SickScanApiFreeLIDoutputstateMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanLIDoutputstateMsg>)>();

  int SickScanApiWaitNextRadarScanMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanRadarScan> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextRadarScanMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextRadarScanMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle, ffi.Pointer<SickScanRadarScan>,
              ffi.Double)>>('SickScanApiWaitNextRadarScanMsg');
  late final _SickScanApiWaitNextRadarScanMsg =
      _SickScanApiWaitNextRadarScanMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanRadarScan>, double)>();

  int SickScanApiFreeRadarScanMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanRadarScan> msg,
  ) {
    return _SickScanApiFreeRadarScanMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeRadarScanMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(SickScanApiHandle,
              ffi.Pointer<SickScanRadarScan>)>>('SickScanApiFreeRadarScanMsg');
  late final _SickScanApiFreeRadarScanMsg =
      _SickScanApiFreeRadarScanMsgPtr.asFunction<
          int Function(SickScanApiHandle, ffi.Pointer<SickScanRadarScan>)>();

  int SickScanApiWaitNextLdmrsObjectArrayMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanLdmrsObjectArray> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextLdmrsObjectArrayMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextLdmrsObjectArrayMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              SickScanApiHandle,
              ffi.Pointer<SickScanLdmrsObjectArray>,
              ffi.Double)>>('SickScanApiWaitNextLdmrsObjectArrayMsg');
  late final _SickScanApiWaitNextLdmrsObjectArrayMsg =
      _SickScanApiWaitNextLdmrsObjectArrayMsgPtr.asFunction<
          int Function(SickScanApiHandle, ffi.Pointer<SickScanLdmrsObjectArray>,
              double)>();

  int SickScanApiFreeLdmrsObjectArrayMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanLdmrsObjectArray> msg,
  ) {
    return _SickScanApiFreeLdmrsObjectArrayMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeLdmrsObjectArrayMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, ffi.Pointer<SickScanLdmrsObjectArray>)>>(
      'SickScanApiFreeLdmrsObjectArrayMsg');
  late final _SickScanApiFreeLdmrsObjectArrayMsg =
      _SickScanApiFreeLdmrsObjectArrayMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanLdmrsObjectArray>)>();

  int SickScanApiWaitNextVisualizationMarkerMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanVisualizationMarkerMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextVisualizationMarkerMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextVisualizationMarkerMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              SickScanApiHandle,
              ffi.Pointer<SickScanVisualizationMarkerMsg>,
              ffi.Double)>>('SickScanApiWaitNextVisualizationMarkerMsg');
  late final _SickScanApiWaitNextVisualizationMarkerMsg =
      _SickScanApiWaitNextVisualizationMarkerMsgPtr.asFunction<
          int Function(SickScanApiHandle,
              ffi.Pointer<SickScanVisualizationMarkerMsg>, double)>();

  int SickScanApiFreeVisualizationMarkerMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanVisualizationMarkerMsg> msg,
  ) {
    return _SickScanApiFreeVisualizationMarkerMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeVisualizationMarkerMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(SickScanApiHandle,
                  ffi.Pointer<SickScanVisualizationMarkerMsg>)>>(
      'SickScanApiFreeVisualizationMarkerMsg');
  late final _SickScanApiFreeVisualizationMarkerMsg =
      _SickScanApiFreeVisualizationMarkerMsgPtr.asFunction<
          int Function(SickScanApiHandle,
              ffi.Pointer<SickScanVisualizationMarkerMsg>)>();

  int SickScanApiWaitNextNavPoseLandmarkMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanNavPoseLandmarkMsg> msg,
    double timeout_sec,
  ) {
    return _SickScanApiWaitNextNavPoseLandmarkMsg(
      apiHandle,
      msg,
      timeout_sec,
    );
  }

  late final _SickScanApiWaitNextNavPoseLandmarkMsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              SickScanApiHandle,
              ffi.Pointer<SickScanNavPoseLandmarkMsg>,
              ffi.Double)>>('SickScanApiWaitNextNavPoseLandmarkMsg');
  late final _SickScanApiWaitNextNavPoseLandmarkMsg =
      _SickScanApiWaitNextNavPoseLandmarkMsgPtr.asFunction<
          int Function(SickScanApiHandle,
              ffi.Pointer<SickScanNavPoseLandmarkMsg>, double)>();

  int SickScanApiFreeNavPoseLandmarkMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanNavPoseLandmarkMsg> msg,
  ) {
    return _SickScanApiFreeNavPoseLandmarkMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiFreeNavPoseLandmarkMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, ffi.Pointer<SickScanNavPoseLandmarkMsg>)>>(
      'SickScanApiFreeNavPoseLandmarkMsg');
  late final _SickScanApiFreeNavPoseLandmarkMsg =
      _SickScanApiFreeNavPoseLandmarkMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanNavPoseLandmarkMsg>)>();

  int SickScanApiNavOdomVelocityMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanNavOdomVelocityMsg> msg,
  ) {
    return _SickScanApiNavOdomVelocityMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiNavOdomVelocityMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, ffi.Pointer<SickScanNavOdomVelocityMsg>)>>(
      'SickScanApiNavOdomVelocityMsg');
  late final _SickScanApiNavOdomVelocityMsg =
      _SickScanApiNavOdomVelocityMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanNavOdomVelocityMsg>)>();

  int SickScanApiOdomVelocityMsg(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanOdomVelocityMsg> msg,
  ) {
    return _SickScanApiOdomVelocityMsg(
      apiHandle,
      msg,
    );
  }

  late final _SickScanApiOdomVelocityMsgPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  SickScanApiHandle, ffi.Pointer<SickScanOdomVelocityMsg>)>>(
      'SickScanApiOdomVelocityMsg');
  late final _SickScanApiOdomVelocityMsg =
      _SickScanApiOdomVelocityMsgPtr.asFunction<
          int Function(
              SickScanApiHandle, ffi.Pointer<SickScanOdomVelocityMsg>)>();
}

final class SickScanHeaderType extends ffi.Struct {
  @ffi.Uint32()
  external int seq;

  @ffi.Uint32()
  external int timestamp_sec;

  @ffi.Uint32()
  external int timestamp_nsec;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> frame_id;
}

final class SickScanUint8ArrayType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<ffi.Uint8> buffer;
}

enum SickScanNativeDataType {
  SICK_SCAN_POINTFIELD_DATATYPE_INT8(1),
  SICK_SCAN_POINTFIELD_DATATYPE_UINT8(2),
  SICK_SCAN_POINTFIELD_DATATYPE_INT16(3),
  SICK_SCAN_POINTFIELD_DATATYPE_UINT16(4),
  SICK_SCAN_POINTFIELD_DATATYPE_INT32(5),
  SICK_SCAN_POINTFIELD_DATATYPE_UINT32(6),
  SICK_SCAN_POINTFIELD_DATATYPE_FLOAT32(7),
  SICK_SCAN_POINTFIELD_DATATYPE_FLOAT64(8);

  final int value;
  const SickScanNativeDataType(this.value);

  static SickScanNativeDataType fromValue(int value) => switch (value) {
        1 => SICK_SCAN_POINTFIELD_DATATYPE_INT8,
        2 => SICK_SCAN_POINTFIELD_DATATYPE_UINT8,
        3 => SICK_SCAN_POINTFIELD_DATATYPE_INT16,
        4 => SICK_SCAN_POINTFIELD_DATATYPE_UINT16,
        5 => SICK_SCAN_POINTFIELD_DATATYPE_INT32,
        6 => SICK_SCAN_POINTFIELD_DATATYPE_UINT32,
        7 => SICK_SCAN_POINTFIELD_DATATYPE_FLOAT32,
        8 => SICK_SCAN_POINTFIELD_DATATYPE_FLOAT64,
        _ => throw ArgumentError(
            "Unknown value for SickScanNativeDataType: $value"),
      };
}

final class SickScanPointFieldMsgType extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @ffi.Uint32()
  external int offset;

  @ffi.Uint8()
  external int datatype;

  @ffi.Uint32()
  external int count;
}

final class SickScanPointFieldArrayType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanPointFieldMsg> buffer;
}

typedef SickScanPointFieldMsg = SickScanPointFieldMsgType;

final class SickScanPointCloudMsgType extends ffi.Struct {
  external SickScanHeader header;

  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int width;

  external SickScanPointFieldArray fields;

  @ffi.Uint8()
  external int is_bigendian;

  @ffi.Uint32()
  external int point_step;

  @ffi.Uint32()
  external int row_step;

  external SickScanUint8Array data;

  @ffi.Uint8()
  external int is_dense;

  @ffi.Int32()
  external int num_echos;

  @ffi.Int32()
  external int segment_idx;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> topic;
}

typedef SickScanHeader = SickScanHeaderType;
typedef SickScanPointFieldArray = SickScanPointFieldArrayType;
typedef SickScanUint8Array = SickScanUint8ArrayType;

final class SickScanVector3MsgType extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;
}

final class SickScanQuaternionMsgType extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;

  @ffi.Double()
  external double w;
}

final class SickScanPointArrayType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanVector3Msg> buffer;
}

typedef SickScanVector3Msg = SickScanVector3MsgType;

final class SickScanImuMsgType extends ffi.Struct {
  external SickScanHeader header;

  external SickScanQuaternionMsg orientation;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> orientation_covariance;

  external SickScanVector3Msg angular_velocity;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> angular_velocity_covariance;

  external SickScanVector3Msg linear_acceleration;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> linear_acceleration_covariance;
}

typedef SickScanQuaternionMsg = SickScanQuaternionMsgType;

final class SickScanLFErecFieldMsgType extends ffi.Struct {
  @ffi.Uint16()
  external int version_number;

  @ffi.Uint8()
  external int field_index;

  @ffi.Uint32()
  external int sys_count;

  @ffi.Float()
  external double dist_scale_factor;

  @ffi.Float()
  external double dist_scale_offset;

  @ffi.Uint32()
  external int angle_scale_factor;

  @ffi.Int32()
  external int angle_scale_offset;

  @ffi.Uint8()
  external int field_result_mrs;

  @ffi.Uint16()
  external int time_state;

  @ffi.Uint16()
  external int year;

  @ffi.Uint8()
  external int month;

  @ffi.Uint8()
  external int day;

  @ffi.Uint8()
  external int hour;

  @ffi.Uint8()
  external int minute;

  @ffi.Uint8()
  external int second;

  @ffi.Uint32()
  external int microsecond;
}

final class SickScanLFErecMsgType extends ffi.Struct {
  external SickScanHeader header;

  @ffi.Uint16()
  external int fields_number;

  @ffi.Array.multi([3])
  external ffi.Array<SickScanLFErecFieldMsg> fields;
}

typedef SickScanLFErecFieldMsg = SickScanLFErecFieldMsgType;

final class SickScanLIDoutputstateMsgType extends ffi.Struct {
  external SickScanHeader header;

  @ffi.Uint16()
  external int version_number;

  @ffi.Uint32()
  external int system_counter;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> output_state;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> output_count;

  @ffi.Uint16()
  external int time_state;

  @ffi.Uint16()
  external int year;

  @ffi.Uint8()
  external int month;

  @ffi.Uint8()
  external int day;

  @ffi.Uint8()
  external int hour;

  @ffi.Uint8()
  external int minute;

  @ffi.Uint8()
  external int second;

  @ffi.Uint32()
  external int microsecond;
}

final class SickScanRadarPreHeaderType extends ffi.Struct {
  @ffi.Uint16()
  external int uiversionno;

  @ffi.Uint32()
  external int uiident;

  @ffi.Uint32()
  external int udiserialno;

  @ffi.Uint8()
  external int bdeviceerror;

  @ffi.Uint8()
  external int bcontaminationwarning;

  @ffi.Uint8()
  external int bcontaminationerror;

  @ffi.Uint32()
  external int uitelegramcount;

  @ffi.Uint32()
  external int uicyclecount;

  @ffi.Uint32()
  external int udisystemcountscan;

  @ffi.Uint32()
  external int udisystemcounttransmit;

  @ffi.Uint16()
  external int uiinputs;

  @ffi.Uint16()
  external int uioutputs;

  @ffi.Uint32()
  external int uicycleduration;

  @ffi.Uint32()
  external int uinoiselevel;

  @ffi.Uint16()
  external int numencoder;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> udiencoderpos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int16> iencoderspeed;
}

final class SickScanRadarObjectType extends ffi.Struct {
  @ffi.Int32()
  external int id;

  @ffi.Uint32()
  external int tracking_time_sec;

  @ffi.Uint32()
  external int tracking_time_nsec;

  @ffi.Uint32()
  external int last_seen_sec;

  @ffi.Uint32()
  external int last_seen_nsec;

  external SickScanVector3Msg velocity_linear;

  external SickScanVector3Msg velocity_angular;

  @ffi.Array.multi([36])
  external ffi.Array<ffi.Double> velocity_covariance;

  external SickScanVector3Msg bounding_box_center_position;

  external SickScanQuaternionMsg bounding_box_center_orientation;

  external SickScanVector3Msg bounding_box_size;

  external SickScanVector3Msg object_box_center_position;

  external SickScanQuaternionMsg object_box_center_orientation;

  @ffi.Array.multi([36])
  external ffi.Array<ffi.Double> object_box_center_covariance;

  external SickScanVector3Msg object_box_size;

  external SickScanPointArray contour_points;
}

typedef SickScanPointArray = SickScanPointArrayType;

final class SickScanRadarObjectArrayType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanRadarObject> buffer;
}

typedef SickScanRadarObject = SickScanRadarObjectType;

final class SickScanRadarScanType extends ffi.Struct {
  external SickScanHeader header;

  external SickScanRadarPreHeader radarpreheader;

  external SickScanPointCloudMsg targets;

  external SickScanRadarObjectArray objects;
}

typedef SickScanRadarPreHeader = SickScanRadarPreHeaderType;
typedef SickScanPointCloudMsg = SickScanPointCloudMsgType;
typedef SickScanRadarObjectArray = SickScanRadarObjectArrayType;

final class SickScanLdmrsObjectBufferType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanLdmrsObject> buffer;
}

typedef SickScanLdmrsObject = SickScanRadarObject;

final class SickScanLdmrsObjectArrayType extends ffi.Struct {
  external SickScanHeader header;

  external SickScanLdmrsObjectBuffer objects;
}

typedef SickScanLdmrsObjectBuffer = SickScanLdmrsObjectBufferType;

final class SickScanColorRGBAType extends ffi.Struct {
  @ffi.Float()
  external double r;

  @ffi.Float()
  external double g;

  @ffi.Float()
  external double b;

  @ffi.Float()
  external double a;
}

final class SickScanColorRGBAArrayType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanColorRGBA> buffer;
}

typedef SickScanColorRGBA = SickScanColorRGBAType;

final class SickScanVisualizationMarkerType extends ffi.Struct {
  external SickScanHeader header;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> ns;

  @ffi.Int32()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int action;

  external SickScanVector3Msg pose_position;

  external SickScanQuaternionMsg pose_orientation;

  external SickScanVector3Msg scale;

  external SickScanColorRGBA color;

  @ffi.Uint32()
  external int lifetime_sec;

  @ffi.Uint32()
  external int lifetime_nsec;

  @ffi.Uint8()
  external int frame_locked;

  external SickScanPointArray points;

  external SickScanColorRGBAArray colors;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> text;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> mesh_resource;

  @ffi.Uint8()
  external int mesh_use_embedded_materials;
}

typedef SickScanColorRGBAArray = SickScanColorRGBAArrayType;

final class SickScanVisualizationMarkerBufferType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanVisualizationMarker> buffer;
}

typedef SickScanVisualizationMarker = SickScanVisualizationMarkerType;

final class SickScanVisualizationMarkerMsgType extends ffi.Struct {
  external SickScanVisualizationMarkerBuffer markers;
}

typedef SickScanVisualizationMarkerBuffer
    = SickScanVisualizationMarkerBufferType;

final class SickScanNavReflectorType extends ffi.Struct {
  @ffi.Uint16()
  external int pos_valid;

  @ffi.Float()
  external double pos_x;

  @ffi.Float()
  external double pos_y;

  @ffi.Uint16()
  external int cartesian_valid;

  @ffi.Int32()
  external int cartesian_x;

  @ffi.Int32()
  external int cartesian_y;

  @ffi.Uint16()
  external int polar_valid;

  @ffi.Uint32()
  external int polar_dist;

  @ffi.Uint32()
  external int polar_phi;

  @ffi.Uint16()
  external int opt_valid;

  @ffi.Uint16()
  external int opt_local_id;

  @ffi.Uint16()
  external int opt_global_id;

  @ffi.Uint8()
  external int opt_type;

  @ffi.Uint16()
  external int opt_subtype;

  @ffi.Uint16()
  external int opt_quality;

  @ffi.Uint32()
  external int opt_timestamp;

  @ffi.Uint16()
  external int opt_size;

  @ffi.Uint16()
  external int opt_hitcount;

  @ffi.Uint16()
  external int opt_meanecho;

  @ffi.Uint16()
  external int opt_startindex;

  @ffi.Uint16()
  external int opt_endindex;

  @ffi.Uint32()
  external int opt_timestamp_sec;

  @ffi.Uint32()
  external int opt_timestamp_nsec;
}

final class SickScanNavReflectorBufferType extends ffi.Struct {
  @ffi.Uint64()
  external int capacity;

  @ffi.Uint64()
  external int size;

  external ffi.Pointer<SickScanNavReflector> buffer;
}

typedef SickScanNavReflector = SickScanNavReflectorType;

final class SickScanNavPoseLandmarkMsgType extends ffi.Struct {
  @ffi.Uint16()
  external int pose_valid;

  @ffi.Float()
  external double pose_x;

  @ffi.Float()
  external double pose_y;

  @ffi.Float()
  external double pose_yaw;

  @ffi.Uint32()
  external int pose_timestamp_sec;

  @ffi.Uint32()
  external int pose_timestamp_nsec;

  @ffi.Int32()
  external int pose_nav_x;

  @ffi.Int32()
  external int pose_nav_y;

  @ffi.Uint32()
  external int pose_nav_phi;

  @ffi.Uint16()
  external int pose_opt_valid;

  @ffi.Uint8()
  external int pose_opt_output_mode;

  @ffi.Uint32()
  external int pose_opt_timestamp;

  @ffi.Int32()
  external int pose_opt_mean_dev;

  @ffi.Uint8()
  external int pose_opt_nav_mode;

  @ffi.Uint32()
  external int pose_opt_info_state;

  @ffi.Uint8()
  external int pose_opt_quant_used_reflectors;

  external SickScanNavReflectorBuffer reflectors;
}

typedef SickScanNavReflectorBuffer = SickScanNavReflectorBufferType;

final class SickScanNavOdomVelocityMsgType extends ffi.Struct {
  @ffi.Float()
  external double vel_x;

  @ffi.Float()
  external double vel_y;

  @ffi.Float()
  external double omega;

  @ffi.Uint32()
  external int timestamp;

  @ffi.Uint8()
  external int coordbase;
}

final class SickScanOdomVelocityMsgType extends ffi.Struct {
  @ffi.Float()
  external double vel_x;

  @ffi.Float()
  external double vel_y;

  @ffi.Float()
  external double omega;

  @ffi.Uint32()
  external int timestamp_sec;

  @ffi.Uint32()
  external int timestamp_nsec;
}

final class SickScanLogMsgType extends ffi.Struct {
  @ffi.Int32()
  external int log_level;

  external ffi.Pointer<ffi.Char> log_message;
}

final class SickScanDiagnosticMsgType extends ffi.Struct {
  @ffi.Int32()
  external int status_code;

  external ffi.Pointer<ffi.Char> status_message;
}

typedef SickScanApiHandle = ffi.Pointer<ffi.Void>;
typedef SickScanPointCloudMsgCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanPointCloudMsgCallbackFunction>>;
typedef SickScanPointCloudMsgCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanPointCloudMsg> msg);
typedef DartSickScanPointCloudMsgCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanPointCloudMsg> msg);
typedef SickScanImuMsgCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanImuMsgCallbackFunction>>;
typedef SickScanImuMsgCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanImuMsg> msg);
typedef DartSickScanImuMsgCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanImuMsg> msg);
typedef SickScanImuMsg = SickScanImuMsgType;
typedef SickScanLFErecMsgCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanLFErecMsgCallbackFunction>>;
typedef SickScanLFErecMsgCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLFErecMsg> msg);
typedef DartSickScanLFErecMsgCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLFErecMsg> msg);
typedef SickScanLFErecMsg = SickScanLFErecMsgType;
typedef SickScanLIDoutputstateMsgCallback = ffi
    .Pointer<ffi.NativeFunction<SickScanLIDoutputstateMsgCallbackFunction>>;
typedef SickScanLIDoutputstateMsgCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLIDoutputstateMsg> msg);
typedef DartSickScanLIDoutputstateMsgCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLIDoutputstateMsg> msg);
typedef SickScanLIDoutputstateMsg = SickScanLIDoutputstateMsgType;
typedef SickScanRadarScanCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanRadarScanCallbackFunction>>;
typedef SickScanRadarScanCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanRadarScan> msg);
typedef DartSickScanRadarScanCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanRadarScan> msg);
typedef SickScanRadarScan = SickScanRadarScanType;
typedef SickScanLdmrsObjectArrayCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanLdmrsObjectArrayCallbackFunction>>;
typedef SickScanLdmrsObjectArrayCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLdmrsObjectArray> msg);
typedef DartSickScanLdmrsObjectArrayCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLdmrsObjectArray> msg);
typedef SickScanLdmrsObjectArray = SickScanLdmrsObjectArrayType;
typedef SickScanVisualizationMarkerCallback = ffi
    .Pointer<ffi.NativeFunction<SickScanVisualizationMarkerCallbackFunction>>;
typedef SickScanVisualizationMarkerCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanVisualizationMarkerMsg> msg);
typedef DartSickScanVisualizationMarkerCallbackFunction = void Function(
    SickScanApiHandle apiHandle,
    ffi.Pointer<SickScanVisualizationMarkerMsg> msg);
typedef SickScanVisualizationMarkerMsg = SickScanVisualizationMarkerMsgType;
typedef SickScanNavPoseLandmarkCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanNavPoseLandmarkCallbackFunction>>;
typedef SickScanNavPoseLandmarkCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanNavPoseLandmarkMsg> msg);
typedef DartSickScanNavPoseLandmarkCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanNavPoseLandmarkMsg> msg);
typedef SickScanNavPoseLandmarkMsg = SickScanNavPoseLandmarkMsgType;
typedef SickScanDiagnosticMsgCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanDiagnosticMsgCallbackFunction>>;
typedef SickScanDiagnosticMsgCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanDiagnosticMsg> msg);
typedef DartSickScanDiagnosticMsgCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanDiagnosticMsg> msg);
typedef SickScanDiagnosticMsg = SickScanDiagnosticMsgType;
typedef SickScanLogMsgCallback
    = ffi.Pointer<ffi.NativeFunction<SickScanLogMsgCallbackFunction>>;
typedef SickScanLogMsgCallbackFunction = ffi.Void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLogMsg> msg);
typedef DartSickScanLogMsgCallbackFunction = void Function(
    SickScanApiHandle apiHandle, ffi.Pointer<SickScanLogMsg> msg);
typedef SickScanLogMsg = SickScanLogMsgType;
typedef SickScanNavOdomVelocityMsg = SickScanNavOdomVelocityMsgType;
typedef SickScanOdomVelocityMsg = SickScanOdomVelocityMsgType;

enum SickScanApiErrorCodes {
  SICK_SCAN_API_SUCCESS(0),
  SICK_SCAN_API_ERROR(1),
  SICK_SCAN_API_NOT_LOADED(2),
  SICK_SCAN_API_NOT_INITIALIZED(3),
  SICK_SCAN_API_NOT_IMPLEMENTED(4),
  SICK_SCAN_API_TIMEOUT(5);

  final int value;
  const SickScanApiErrorCodes(this.value);

  static SickScanApiErrorCodes fromValue(int value) => switch (value) {
        0 => SICK_SCAN_API_SUCCESS,
        1 => SICK_SCAN_API_ERROR,
        2 => SICK_SCAN_API_NOT_LOADED,
        3 => SICK_SCAN_API_NOT_INITIALIZED,
        4 => SICK_SCAN_API_NOT_IMPLEMENTED,
        5 => SICK_SCAN_API_TIMEOUT,
        _ => throw ArgumentError(
            "Unknown value for SickScanApiErrorCodes: $value"),
      };
}
